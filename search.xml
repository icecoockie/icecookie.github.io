<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/02/24/sql%E6%B3%A8%E5%85%A5%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/02/24/sql%E6%B3%A8%E5%85%A5%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="url学习记录"><a href="#url学习记录" class="headerlink" title="url学习记录"></a>url学习记录</h1><h2 id="什么是url"><a href="#什么是url" class="headerlink" title="什么是url"></a>什么是url</h2><p>下面是一些 URL 的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://developer.mozilla.org</span><br><span class="line">https://developer.mozilla.org/zh-CN/docs/Learn/</span><br><span class="line">https://developer.mozilla.org/zh-CN/search?q=URL</span><br></pre></td></tr></table></figure><p>你可以将上面的这些网址输进你的浏览器地址栏来告诉浏览器加载相关联的页面（或资源）。</p><p>一个 URL 由不同的部分组成，其中一些是必须的，而另一些是可选的。让我们以下面这个 URL 为例看看其中最重要的部分：</p><p><img src="/sql%E6%B3%A8%E5%85%A5%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/mdn-url-all.png" alt="完整的 URL"></p><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL#%E5%8D%8F%E8%AE%AE">协议</a></h2><p><img src="/sql%E6%B3%A8%E5%85%A5%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/mdn-url-protocol@x2_update.png" alt="Scheme"></p><p><code>http</code> 是协议。它表明了浏览器必须使用何种协议。它通常都是 HTTP 协议或是 HTTP 协议的安全版，即 HTTPS。Web 需要它们二者之一，但浏览器也知道如何处理其他协议，比如 <code>mailto:</code>（打开邮件客户端）或者 <code>ftp:</code>（处理文件传输），所以当你看到这些协议时，不必惊讶。</p><h2 id="Authority"><a href="#Authority" class="headerlink" title="Authority"></a><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL#authority">Authority</a></h2><p><img src="/sql%E6%B3%A8%E5%85%A5%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/mdn-url-authority.png" alt="Authority"></p><ul><li><code>www.example.com</code> 是域名。它表明正在请求哪个 Web 服务器。或者，可以直接使用<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/IP_Address">IP address</a>，但是因为它不太方便，所以它不经常在网络上使用。</li><li><code>:80</code> 是端口。它表示用于访问 Web 服务器上的资源的技术“门”。如果 Web 服务器使用 HTTP 协议的标准端口（HTTP 为 80，HTTPS 为 443）来授予其资源的访问权限，则通常会被忽略。否则是强制性的。</li></ul><h2 id="资源路径"><a href="#资源路径" class="headerlink" title="资源路径"></a><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL#%E8%B5%84%E6%BA%90%E8%B7%AF%E5%BE%84">资源路径</a></h2><p><img src="/sql%E6%B3%A8%E5%85%A5%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/mdn-url-path@x2.png" alt="文件路径"></p><p><code>/path/to/myfile.html</code> 是网络服务器上资源的路径。在 Web 的早期阶段，像这样的路径表示 Web 服务器上的物理文件位置。如今，它主要是由没有任何物理现实的 Web 服务器处理的抽象。</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL#%E5%8F%82%E6%95%B0">参数</a></h2><p><img src="/sql%E6%B3%A8%E5%85%A5%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/mdn-url-parameters@x2.png" alt="参数"></p><p><code>?key1=value1&amp;key2=value2</code> 是提供给网络服务器的额外参数。这些参数是用 <code>&amp;</code> 符号分隔的键&#x2F;值对列表。在返回资源之前，Web 服务器可以使用这些参数来执行额外的操作。每个 Web 服务器都有自己关于参数的规则，唯一可靠的方式来知道特定 Web 服务器是否处理参数是通过询问 Web 服务器所有者。</p><h2 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL#%E9%94%9A%E7%82%B9">锚点</a></h2><p><img src="/sql%E6%B3%A8%E5%85%A5%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/mdn-url-anchor@x2.png" alt="锚点"></p><p><code>#SomewhereInTheDocument</code> 是资源本身的另一部分的锚点。锚点表示资源中的一种“书签”，给浏览器显示位于该“加书签”位置的内容的方向。例如，在 HTML 文档上，浏览器将滚动到定义锚点的位置;在视频或音频文档上，浏览器将尝试转到锚代表的时间。值得注意的是，＃后面的部分（也称为片段标识符）从来没有发送到请求的服务器。</p><p><strong>备注：</strong> 这里是关于 URL 的<a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%AC%A6">一些额外的部分和一些额外的规则</a>，但它们对于普通用户或 Web 开发者不是非常重要。你不必担心这个，要构筑和使用完全实用的 URL 不必了解这些。</p><p>你可能想到一个 URL 类似普通信件的地址：协议代表你要使用的邮政服务，域名是城市或者城镇，端口则像邮政编码；路径代表着你的信件所有递送的大楼；参数则提供额外的信息，如大楼所在单元；最后，锚点表示信件的收件人。</p><h3 id="如何使用-URL"><a href="#如何使用-URL" class="headerlink" title="如何使用 URL"></a><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8_url">如何使用 URL</a></h3><p>可以直接在浏览器的地址栏里输入任何 URL，来获得后台的资源。但是这仅仅是冰山一角。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/HTML">HTML</a> 语言 — <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML">后续会再来讨论 (en-US)</a> — 对 URLs 有大量的使用：</p><ul><li>为在其他文档中新建链接，用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/a">&#96;&#96;</a> ;</li><li>为将文档与它的相关资源关联，用各种标签如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/link">&#96;&#96;</a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script">&#96;&#96;</a> ;</li><li>为显示多媒体如图片 (用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/img"><code>![img](../typora解压/typora解压/typora)</code></a> ), 视频 (用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video">&#96;&#96;</a> ), 声音和音乐 (用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio">&#96;&#96;</a> ), 等等;</li><li>为显示其他 HTML 文档，用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe">&#96;&#96;</a> .</li></ul><p>其他大量使用 URLs 的技术如 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CSS">CSS</a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/JavaScript">JavaScript</a>, 这些才是 Web 的中心。</p><h3 id="绝对-URL-和相对-URL"><a href="#绝对-URL-和相对-URL" class="headerlink" title="绝对 URL 和相对 URL"></a><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL#%E7%BB%9D%E5%AF%B9_url_%E5%92%8C%E7%9B%B8%E5%AF%B9_url">绝对 URL 和相对 URL</a></h3><p>我们上面看到的是一个绝对的 URL，但也有一个叫做相对 URL 的东西。我们来看看这个区别意味着什么呢？</p><p>URL 的必需部分在很大程度上取决于使用 URL 的上下文。在浏览器的地址栏中，网址没有任何上下文，因此你必须提供一个完整的（或绝对的）URL，就像我们上面看到的一样。你不需要包括协议（浏览器默认使用 HTTP）或端口（仅当目标 Web 服务器使用某些异常端口时才需要），但 URL 的所有其他部分都是必需的。</p><p>当文档中使用 URL 时，例如 HTML 页面中的内容有所不同。因为浏览器已经有文档自己的 URL，它可以使用这些信息来填写该文档中可用的任何 URL 的缺失部分。我们可以通过仅查看 URL 的路径部分来区分绝对 URL 和相对 URL。<strong>如果 URL 的路径部分以“&#x2F;”字符开头，则浏览器将从服务器的顶部根目录获取该资源，而不引用当前文档给出的上下文</strong>。</p><p>我们来看一些例子来使这个更清楚。</p><h4 id="绝对-URL-示例"><a href="#绝对-URL-示例" class="headerlink" title="绝对 URL 示例"></a>绝对 URL 示例</h4><table><thead><tr><th>完整网址（与之前使用的网址相同）</th><th><code>https://developer.mozilla.org/zh-CN/docs/Learn</code></th></tr></thead><tbody><tr><td>隐去协议</td><td><code>//developer.mozilla.org/zh-CN/docs/Learn</code>在这种情况下，浏览器将使用与用于加载该 URL 的文档相同的协议来调用该 URL。</td></tr><tr><td>隐去域名</td><td><code>/zh-CN/docs/Learn</code>这是 HTML 文档中绝对 URL 最常见的用例。浏览器将使用与用于加载托管该 URL 的文档相同的协议和相同的域名。<strong>注意</strong>：不可能省略该域名而不省略协议。</td></tr></tbody></table><h4 id="相对-URL-示例"><a href="#相对-URL-示例" class="headerlink" title="相对 URL 示例"></a>相对 URL 示例</h4><p>为了更好地了解以下示例，我们假设从位于以下 URL 的文档中调用 URL： <code>https://developer.mozilla.org/zh-CN/docs/Learn</code></p><table><thead><tr><th>子资源</th><th><code>Skills/Infrastructure/Understanding_URLs</code>因为该 URL 不以 &#x2F; 开头，浏览器将尝试在包含当前资源的子目录中查找文档。所以在这个例子中，我们真的想要达到这个 URL <code>https://developer.mozilla.org/zh-CN/docs/Learn/Skills/Infrastructure/Understanding_URLs</code></th></tr></thead><tbody><tr><td>回到目录树中</td><td><code>../CSS/display</code>在这种情况下，我们使用从 UNIX 文件系统世界继承的..&#x2F;写入约定来告诉我们要从一个目录上升的浏览器。在这里，我们要达到以下 URL：<a href="https://developer.mozilla.org/zh-CN/docs/CSS/display%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%B0%86%E5%85%B6%E7%AE%80%E5%8C%96%E4%B8%BA%EF%BC%9Ahttps://developer.mozilla.org/zh-CN/docs/CSS/display">https://developer.mozilla.org/zh-CN/docs/Learn/../CSS/display，可以将其简化为：https://developer.mozilla.org/zh-CN/docs/CSS/display</a></td></tr></tbody></table><h3 id="语义-URL"><a href="#语义-URL" class="headerlink" title="语义 URL"></a><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL#%E8%AF%AD%E4%B9%89_url">语义 URL</a></h3><p>尽管 URL 具有非常的技术性，但 URL 表示一个可读性的网站入口点。它们可以被记住，并且任何人都可以将它们输入浏览器的地址栏。人是 Web 的核心，因此建立所谓的 <em><a href="http://en.wikipedia.org/wiki/Semantic_URL">semantic URLs</a></em> 被认为是最佳实践。语义 URL 使用具有固有含义的单词，任何人都可以理解，无论他们的技术水平如何。</p><p>语言语义当然与电脑无关。你可能经常看到看起来像随机字符混搭的网址。但创建人类可读的 URL 有很多优点：</p><ul><li>操作它们更容易</li><li>它根据用户在哪里，他们在做什么，他们正在阅读或在网络上进行互动来澄清用户的情况。</li><li>一些搜索引擎可以使用这些语义来改进相关页面的分类。</li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
